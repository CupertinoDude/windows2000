/*	File: D:\WACKER\term\tables.rc (Created: 26-Nov-1993)
 *
 *	Copyright 1994, 1998 by Hilgraeve Inc. -- Monroe, MI
 *	All rights reserved
 *
 *	$Revision: 1 $
 *	$Date: 10/05/98 12:32p $
 */

#include "..\emu\emu.h"
#include "..\emu\emuid.h"
#include "..\tdll\chars.h"

/* ---------------------------------------------------------------------- */

/* table for CRC calculations in CompuServe B protocol */
IDT_CSB_CRC_TABLE RCDATA
	{
	0x0000, 0x1021, 0x2042, 0x3063, 0x4084, 0x50A5, 0x60C6, 0x70E7,
	0x8108, 0x9129, 0xA14A, 0xB16B, 0xC18C, 0xD1AD, 0xE1CE, 0xF1EF,
	0x1231, 0x0210, 0x3273, 0x2252, 0x52B5, 0x4294, 0x72F7, 0x62D6,
	0x9339, 0x8318, 0xB37B, 0xA35A, 0xD3BD, 0xC39C, 0xF3FF, 0xE3DE,
	0x2462, 0x3443, 0x0420, 0x1401, 0x64E6, 0x74C7, 0x44A4, 0x5485,
	0xA56A, 0xB54B, 0x8528, 0x9509, 0xE5EE, 0xF5CF, 0xC5AC, 0xD58D,
	0x3653, 0x2672, 0x1611, 0x0630, 0x76D7, 0x66F6, 0x5695, 0x46B4,
	0xB75B, 0xA77A, 0x9719, 0x8738, 0xF7DF, 0xE7FE, 0xD79D, 0xC7BC,
	0x48C4, 0x58E5, 0x6886, 0x78A7, 0x0840, 0x1861, 0x2802, 0x3823,
	0xC9CC, 0xD9ED, 0xE98E, 0xF9AF, 0x8948, 0x9969, 0xA90A, 0xB92B,
	0x5AF5, 0x4AD4, 0x7AB7, 0x6A96, 0x1A71, 0x0A50, 0x3A33, 0x2A12,
	0xDBFD, 0xCBDC, 0xFBBF, 0xEB9E, 0x9B79, 0x8B58, 0xBB3B, 0xAB1A,
	0x6CA6, 0x7C87, 0x4CE4, 0x5CC5, 0x2C22, 0x3C03, 0x0C60, 0x1C41,
	0xEDAE, 0xFD8F, 0xCDEC, 0xDDCD, 0xAD2A, 0xBD0B, 0x8D68, 0x9D49,
	0x7E97, 0x6EB6, 0x5ED5, 0x4EF4, 0x3E13, 0x2E32, 0x1E51, 0x0E70,
	0xFF9F, 0xEFBE, 0xDFDD, 0xCFFC, 0xBF1B, 0xAF3A, 0x9F59, 0x8F78,
	0x9188, 0x81A9, 0xB1CA, 0xA1EB, 0xD10C, 0xC12D, 0xF14E, 0xE16F,
	0x1080, 0x00A1, 0x30C2, 0x20E3, 0x5004, 0x4025, 0x7046, 0x6067,
	0x83B9, 0x9398, 0xA3FB, 0xB3DA, 0xC33D, 0xD31C, 0xE37F, 0xF35E,
	0x02B1, 0x1290, 0x22F3, 0x32D2, 0x4235, 0x5214, 0x6277, 0x7256,
	0xB5EA, 0xA5CB, 0x95A8, 0x8589, 0xF56E, 0xE54F, 0xD52C, 0xC50D,
	0x34E2, 0x24C3, 0x14A0, 0x0481, 0x7466, 0x6447, 0x5424, 0x4405,
	0xA7DB, 0xB7FA, 0x8799, 0x97B8, 0xE75F, 0xF77E, 0xC71D, 0xD73C,
	0x26D3, 0x36F2, 0x0691, 0x16B0, 0x6657, 0x7676, 0x4615, 0x5634,
	0xD94C, 0xC96D, 0xF90E, 0xE92F, 0x99C8, 0x89E9, 0xB98A, 0xA9AB,
	0x5844, 0x4865, 0x7806, 0x6827, 0x18C0, 0x08E1, 0x3882, 0x28A3,
	0xCB7D, 0xDB5C, 0xEB3F, 0xFB1E, 0x8BF9, 0x9BD8, 0xABBB, 0xBB9A,
	0x4A75, 0x5A54, 0x6A37, 0x7A16, 0x0AF1, 0x1AD0, 0x2AB3, 0x3A92,
	0xFD2E, 0xED0F, 0xDD6C, 0xCD4D, 0xBDAA, 0xAD8B, 0x9DE8, 0x8DC9,
	0x7C26, 0x6C07, 0x5C64, 0x4C45, 0x3CA2, 0x2C83, 0x1CE0, 0x0CC1,
	0xEF1F, 0xFF3E, 0xCF5D, 0xDF7C, 0xAF9B, 0xBFBA, 0x8FD9, 0x9FF8,
	0x6E17, 0x7E36, 0x4E55, 0x5E74, 0x2E93, 0x3EB2, 0x0ED1, 0x1EF0
	}

/*
 * Copyright (C) 1986 Gary S. Brown.  You may use this program, or
 * code or tables extracted from it, as desired without restriction.
 */

/* First, the polynomial itself and its table of feedback terms.  The  */
/* polynomial is                                                       */
/* X^32+X^26+X^23+X^22+X^16+X^12+X^11+X^10+X^8+X^7+X^5+X^4+X^2+X^1+X^0 */
/* Note that we take it "backwards" and put the highest-order term in  */
/* the lowest-order bit.  The X^32 term is "implied"; the LSB is the   */
/* X^31 term, etc.  The X^0 term (usually shown as "+1") results in    */
/* the MSB being 1.                                                    */

/* Note that the usual hardware shift register implementation, which   */
/* is what we're using (we're merely optimizing it by doing eight-bit  */
/* chunks at a time) shifts bits into the lowest-order term.  In our   */
/* implementation, that means shifting towards the right.  Why do we   */
/* do it this way?  Because the calculated CRC must be transmitted in  */
/* order from highest-order term to lowest-order term.  UARTs transmit */
/* characters in order from LSB to MSB.  By storing the CRC this way,  */
/* we hand it to the UART in the order low-byte to high-byte; the UART */
/* sends each low-bit to hight-bit; and the result is transmission bit */
/* by bit from highest- to lowest-order term without requiring any bit */
/* shuffling on our part.  Reception works similarly.                  */

/* The feedback terms table consists of 256, 32-bit entries.  Notes:   */
/*                                                                     */
/*     The table can be generated at runtime if desired; code to do so */
/*     is shown later.  It might not be obvious, but the feedback      */
/*     terms simply represent the results of eight shift/xor opera-    */
/*     tions for all combinations of data and CRC register values.     */
/*                                                                     */
/*     The values must be right-shifted by eight bits by the "updcrc"  */
/*     logic; the shift must be unsigned (bring in zeroes).  On some   */
/*     hardware you could probably optimize the shift in assembler by  */
/*     using byte-swap instructions.                                   */

IDT_CRC_32_TAB RCDATA /* CRC polynomial 0xedb88320 */
	{
	0x0000, 0x0000, 0x3096, 0x7707, 0x612c, 0xee0e, 0x51ba, 0x9909,
	0xc419, 0x076d, 0xf48f, 0x706a, 0xa535, 0xe963, 0x95a3, 0x9e64,
	0x8832, 0x0edb, 0xb8a4, 0x79dc, 0xe91e, 0xe0d5, 0xd988, 0x97d2,
	0x4c2b, 0x09b6, 0x7cbd, 0x7eb1, 0x2d07, 0xe7b8, 0x1d91, 0x90bf,
	0x1064, 0x1db7, 0x20f2, 0x6ab0, 0x7148, 0xf3b9, 0x41de, 0x84be,
	0xd47d, 0x1ada, 0xe4eb, 0x6ddd, 0xb551, 0xf4d4, 0x85c7, 0x83d3,
	0x9856, 0x136c, 0xa8c0, 0x646b, 0xf97a, 0xfd62, 0xc9ec, 0x8a65,
	0x5c4f, 0x1401, 0x6cd9, 0x6306, 0x3d63, 0xfa0f, 0x0df5, 0x8d08,
	0x20c8, 0x3b6e, 0x105e, 0x4c69, 0x41e4, 0xd560, 0x7172, 0xa267,
	0xe4d1, 0x3c03, 0xd447, 0x4b04, 0x85fd, 0xd20d, 0xb56b, 0xa50a,
	0xa8fa, 0x35b5, 0x986c, 0x42b2, 0xc9d6, 0xdbbb, 0xf940, 0xacbc,
	0x6ce3, 0x32d8, 0x5c75, 0x45df, 0x0dcf, 0xdcd6, 0x3d59, 0xabd1,
	0x30ac, 0x26d9, 0x003a, 0x51de, 0x5180, 0xc8d7, 0x6116, 0xbfd0,
	0xf4b5, 0x21b4, 0xc423, 0x56b3, 0x9599, 0xcfba, 0xa50f, 0xb8bd,
	0xb89e, 0x2802, 0x8808, 0x5f05, 0xd9b2, 0xc60c, 0xe924, 0xb10b,
	0x7c87, 0x2f6f, 0x4c11, 0x5868, 0x1dab, 0xc161, 0x2d3d, 0xb666,
	0x4190, 0x76dc, 0x7106, 0x01db, 0x20bc, 0x98d2, 0x102a, 0xefd5,
	0x8589, 0x71b1, 0xb51f, 0x06b6, 0xe4a5, 0x9fbf, 0xd433, 0xe8b8,
	0xc9a2, 0x7807, 0xf934, 0x0f00, 0xa88e, 0x9609, 0x9818, 0xe10e,
	0x0dbb, 0x7f6a, 0x3d2d, 0x086d, 0x6c97, 0x9164, 0x5c01, 0xe663,
	0x51f4, 0x6b6b, 0x6162, 0x1c6c, 0x30d8, 0x8565, 0x004e, 0xf262,
	0x95ed, 0x6c06, 0xa57b, 0x1b01, 0xf4c1, 0x8208, 0xc457, 0xf50f,
	0xd9c6, 0x65b0, 0xe950, 0x12b7, 0xb8ea, 0x8bbe, 0x887c, 0xfcb9,
	0x1ddf, 0x62dd, 0x2d49, 0x15da, 0x7cf3, 0x8cd3, 0x4c65, 0xfbd4,
	0x6158, 0x4db2, 0x51ce, 0x3ab5, 0x0074, 0xa3bc, 0x30e2, 0xd4bb,
	0xa541, 0x4adf, 0x95d7, 0x3dd8, 0xc46d, 0xa4d1, 0xf4fb, 0xd3d6,
	0xe96a, 0x4369, 0xd9fc, 0x346e, 0x8846, 0xad67, 0xb8d0, 0xda60,
	0x2d73, 0x4404, 0x1de5, 0x3303, 0x4c5f, 0xaa0a, 0x7cc9, 0xdd0d,
	0x713c, 0x5005, 0x41aa, 0x2702, 0x1010, 0xbe0b, 0x2086, 0xc90c,
	0xb525, 0x5768, 0x85b3, 0x206f, 0xd409, 0xb966, 0xe49f, 0xce61,
	0xf90e, 0x5ede, 0xc998, 0x29d9, 0x9822, 0xb0d0, 0xa8b4, 0xc7d7,
	0x3d17, 0x59b3, 0x0d81, 0x2eb4, 0x5c3b, 0xb7bd, 0x6cad, 0xc0ba,
	0x8320, 0xedb8, 0xb3b6, 0x9abf, 0xe20c, 0x03b6, 0xd29a, 0x74b1,
	0x4739, 0xead5, 0x77af, 0x9dd2, 0x2615, 0x04db, 0x1683, 0x73dc,
	0x0b12, 0xe363, 0x3b84, 0x9464, 0x6a3e, 0x0d6d, 0x5aa8, 0x7a6a,
	0xcf0b, 0xe40e, 0xff9d, 0x9309, 0xae27, 0x0a00, 0x9eb1, 0x7d07,
	0x9344, 0xf00f, 0xa3d2, 0x8708, 0xf268, 0x1e01, 0xc2fe, 0x6906,
	0x575d, 0xf762, 0x67cb, 0x8065, 0x3671, 0x196c, 0x06e7, 0x6e6b,
	0x1b76, 0xfed4, 0x2be0, 0x89d3, 0x7a5a, 0x10da, 0x4acc, 0x67dd,
	0xdf6f, 0xf9b9, 0xeff9, 0x8ebe, 0xbe43, 0x17b7, 0x8ed5, 0x60b0,
	0xa3e8, 0xd6d6, 0x937e, 0xa1d1, 0xc2c4, 0x38d8, 0xf252, 0x4fdf,
	0x67f1, 0xd1bb, 0x5767, 0xa6bc, 0x06dd, 0x3fb5, 0x364b, 0x48b2,
	0x2bda, 0xd80d, 0x1b4c, 0xaf0a, 0x4af6, 0x3603, 0x7a60, 0x4104,
	0xefc3, 0xdf60, 0xdf55, 0xa867, 0x8eef, 0x316e, 0xbe79, 0x4669,
	0xb38c, 0xcb61, 0x831a, 0xbc66, 0xd2a0, 0x256f, 0xe236, 0x5268,
	0x7795, 0xcc0c, 0x4703, 0xbb0b, 0x16b9, 0x2202, 0x262f, 0x5505,
	0x3bbe, 0xc5ba, 0x0b28, 0xb2bd, 0x5a92, 0x2bb4, 0x6a04, 0x5cb3,
	0xffa7, 0xc2d7, 0xcf31, 0xb5d0, 0x9e8b, 0x2cd9, 0xae1d, 0x5bde,
	0xc2b0, 0x9b64, 0xf226, 0xec63, 0xa39c, 0x756a, 0x930a, 0x026d,
	0x06a9, 0x9c09, 0x363f, 0xeb0e, 0x6785, 0x7207, 0x5713, 0x0500,
	0x4a82, 0x95bf, 0x7a14, 0xe2b8, 0x2bae, 0x7bb1, 0x1b38, 0x0cb6,
	0x8e9b, 0x92d2, 0xbe0d, 0xe5d5, 0xefb7, 0x7cdc, 0xdf21, 0x0bdb,
	0xd2d4, 0x86d3, 0xe242, 0xf1d4, 0xb3f8, 0x68dd, 0x836e, 0x1fda,
	0x16cd, 0x81be, 0x265b, 0xf6b9, 0x77e1, 0x6fb0, 0x4777, 0x18b7,
	0x5ae6, 0x8808, 0x6a70, 0xff0f, 0x3bca, 0x6606, 0x0b5c, 0x1101,
	0x9eff, 0x8f65, 0xae69, 0xf862, 0xffd3, 0x616b, 0xcf45, 0x166c,
	0xe278, 0xa00a, 0xd2ee, 0xd70d, 0x8354, 0x4e04, 0xb3c2, 0x3903,
	0x2661, 0xa767, 0x16f7, 0xd060, 0x474d, 0x4969, 0x77db, 0x3e6e,
	0x6a4a, 0xaed1, 0x5adc, 0xd9d6, 0x0b66, 0x40df, 0x3bf0, 0x37d8,
	0xae53, 0xa9bc, 0x9ec5, 0xdebb, 0xcf7f, 0x47b2, 0xffe9, 0x30b5,
	0xf21c, 0xbdbd, 0xc28a, 0xcaba, 0x9330, 0x53b3, 0xa3a6, 0x24b4,
	0x3605, 0xbad0, 0x0693, 0xcdd7, 0x5729, 0x54de, 0x67bf, 0x23d9,
	0x7a2e, 0xb366, 0x4ab8, 0xc461, 0x1b02, 0x5d68, 0x2b94, 0x2a6f,
	0xbe37, 0xb40b, 0x8ea1, 0xc30c, 0xdf1b, 0x5a05, 0xef8d, 0x2d02
	}

/* ---------------------------------------------------------------------- */



IDT_EMU_VT100_CHAR_SETS RCDATA
	{
	3, /* This number tells read routines there are 3 entries in the table. */
	"ASCII\0",				EMU_CHARSET_ASCII,
	"United Kingdom\0", 	EMU_CHARSET_UK,
	"Special Graphics\0",	EMU_CHARSET_SPECIAL
	}

/* ---------------------------------------------------------------------- */



IDT_EMU_VT220_CHAR_SETS RCDATA
	{
	5, /* This number tells read routines there are 5 entries in the table. */
	"Multinational\0",		EMU_CHARSET_MULTINATIONAL,
	"British\0", 			EMU_CHARSET_UK,
	"French\0",				EMU_CHARSET_FRENCH,
	"French-Canadian\0",	EMU_CHARSET_FRENCHCANADIAN,
	"German\0",				EMU_CHARSET_GERMAN
	}

/* ---------------------------------------------------------------------- */
