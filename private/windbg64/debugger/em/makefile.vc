#
# Set up debug and codeview defines to standard defaults.
#

!if "$(DEBUG)" == ""
DEBUG = 1
!endif

!ifdef BROWSE
BROWSE = 1
!endif

!if "$(CODEVIEW)" == ""
!if $(DEBUG)
CODEVIEW = 1
!else
CODEVIEW = 0
!endif
!endif

!if "$(ILINK)" == ""
!if $(DEBUG)
ILINK = 1
!else
ILINK = 0
!endif
!endif


#
# Debug vs Release things
#
!if $(DEBUG)
dbg = -DDBG=1 -DDEVL=1 -DBETA=1
opt = -Od -Zi -Fd$O/em.pdb
lopt = -opt:noref
d = d
!else
dbg = -DDBG=0 -DDEVL=1 -DBETA=0
opt = -O2 -Gy -Zi -Fd$O/em.pdb
lopt = -opt:ref
d =
!endif

!if $(CODEVIEW)
lfl_dbg = -debug
!else
lfl_dbg =
!endif

!if $(ILINK)
lfl_dbg = $(lfl_dbg) -incremental:yes
!else
lfl_dbg = $(lfl_dbg) -incremental:no
!endif
#
# verbose or not
#
!if "$(verbose)" == ""
verbose_c = -nologo
!endif

#
# Set up some shortcuts
#
CC = cl
RC = rc
LINKER = link
c = -c -Zel -Zp8 -W3 -MD $(opt)


### fix subdir p_i386; and "define"s HOST_I386, etc.
FIX_DEF = $(PROCESSOR_ARCHITECTURE)

!if "$(PROCESSOR_ARCHITECTURE)" == "x86"
P = $(CPU)
!else
P = $(PROCESSOR_ARCHITECTURE)
!endif

L = $(LANGAPI)
OBJDIR = $$obj$d
O = $(OBJDIR)\$P
I = -I. -I..\include -I$L\debugger\osdebug4 -I..\..\osdebug\include -I..\..\include -I$L\include -I$L\debugger

!IF "$(PROCESSOR_ARCHITECTURE)" == "MIPS"
XFL =
c = $(c) -Gt0
EM_NAME = emn1n1
!ELSEIF "$(PROCESSOR_ARCHITECTURE)" == "ALPHA"
XFL = -D_PORTABLE_32BIT_CONTEXT
c = $(c) -Gt0
EM_NAME = emn2n2
!ELSEIF ( ("$(PROCESSOR_ARCHITECTURE)" == "X86") || ("$(PROCESSOR_ARCHITECTURE)" == "x86") || ("$(PROCESSOR_ARCHITECTURE)" == "i386") )
XFL =
c = $(c) -Gz
EM_NAME = emn0n0
!ENDIF

CFL = -DWIN32_LEAN_AND_MEAN=1 -DCONDITION_HANDLING=1 -DNT_INST=0 -DNT_UP=1 \
        -DNO_EXT_KEYS $(dbg) -DWIN32 -DHOST32 -D_$(FIX_DEF)_ \
        -DDOLPHIN -D$P=1 -DADDR_MIXED -DNO_TRACE_BIT -DOSDEBUG4 -DTARGET32 \
        -DHOST_$P  $(XFL)

RCFL = $(CFL)
LFL = -base:@dllbase.txt,$(EM_NAME) $(lfl_dbg) $(lopt)


#
# Inference rule for c builds
#

### Target-independent: emdp,emdp2,emdp3,emdisasm,emglobal
###-------------------------------------------------------------
{.}.cpp{$O}.obj :
        @$(CC) @<<cli.rsp
$(verbose_c)
$c
$I
$(CFL)
-Fo$@ $<
!IF "$(BROWSE)" == "1"
-FR$O\
!ENDIF
<<keep


{.}.rc{$O}.res :
        @$(RC) -l 409 -I..\..\..\inc -r -fo $@ $(RCFL) $I <<$O\emn$(N)n$(N)$(d).rc
#include "appver.h"
#define VER_INTERNALNAME_STR            "$(TARGET).DLL"
#define VER_FILEDESCRIPTION_STR         "Microsoft\256 C/C++ Windows Execution Model"
#define VER_ORIGINALFILENAME_STR        "$(TARGET).DLL"
#include "version.rc"
<<


#
# Main goal
#
all:    dir_tgt em



### Target-dependent: emdp_mip,emdp_x86,emdp_axp,emdp_ppc
###-------------------------------------------------------------
$(O)\emdp_mip.obj : emdp_mip.cpp
        @$(CC) @<<cldm.rsp
$(verbose_c)
$c
$I
$(CFL) -DTARGET_MIPS
-Fo$(O)\emdp_mip.obj  emdp_mip.cpp
<<keep

$(O)\emdp_x86.obj : emdp_x86.cpp
        @$(CC) @<<cldx.rsp
$(verbose_c)
$c
$I
$(CFL) -DTARGET_i386
-Fo$(O)\emdp_x86.obj emdp_x86.cpp
<<keep


$(O)\emdp_axp.obj : emdp_axp.cpp
        @$(CC) @<<clda.rsp
$(verbose_c)
$c
$I
$(CFL) -DTARGET_ALPHA -D_PORTABLE_32BIT_CONTEXT
-Fo$(O)\emdp_axp.obj  emdp_axp.cpp
<<keep




#
# Execution Model (EM)
#
EMOBJS = \
        $O/em.res \
        $O/emdp.obj \
        $O/emdp2.obj \
        $O/emdp3.obj \
        $O/emdp_mip.obj \
        $O/emdp_x86.obj \
        $O/emdp_axp.obj \
        $O/emdisasm.obj \
        $O/emglobal.obj

em : $(EM_NAME)$d.dll \
!IF "$(BROWSE)" == "1"
        $(EM_NAME)$d.bsc
!ENDIF

$(EM_NAME)$d.bsc: $O\*.sbr
        bscmake -o $@ $O\*.sbr

$(EM_NAME)$d.dll : $(EMOBJS) em.def
        $(LINKER) @<<link.rsp
-dll
-subsystem:windows
-machine:$(CPU)
-nodefaultlib:msvcrtd.lib
$(LFL)
$(EMOBJS)
-def:em.def
-out:$(EM_NAME)$d.dll
kernel32.lib
msvcrt.lib
imagehlp.lib
disasm.lib
<<keep




#
# Directory targets
#
dir_tgt: $O

$O : $(OBJDIR)
        @-mkdir $O >nul 2>&1

$(OBJDIR):
        @-mkdir $(OBJDIR) >nul 2>&1

#
# Clean goal
#
clean:
        del /f /q $O\*
auto.dep: nul
        copy << auto.dep
#--------------------------------------------------------------------
# AUTOMATICALLY GENERATED BY MKDEP
#
# To regenerate dependencies, check out this file and then type
#     nmake auto.dep
#
# Does not add resource.h to dep lists
#--------------------------------------------------------------------

<<
        mkdep $(I) -P $$(O)\ -s .obj -n precomp.c p_$(P)\*.c p_$(P)\*.cpp \
        | sed -e "s!    !   !" \
                -e "s!resource.h!!g" >> auto.dep

# --[Project dependencies]-----------------

# N.B. no resource dependencies

!if "$(NODEP)"!="1"
!if exist(auto.dep)
!include auto.dep
!else
!message Note: no AUTO.DEP currently exists
!endif
!endif

