/* This file generate by gentable.c -- do not modify directly! */
#ifdef DECLARE_DATA
const BYTE g_LengthLookup[256] =
{
 0, 1, 2, 3, 4, 5, 6, 7, 8, 8, 9, 9,10,10,11,11,
12,12,12,12,13,13,13,13,14,14,14,14,15,15,15,15,
16,16,16,16,16,16,16,16,17,17,17,17,17,17,17,17,
18,18,18,18,18,18,18,18,19,19,19,19,19,19,19,19,
20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,
21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,
22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,
23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,
24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,
24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,
25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,
25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,
26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,
26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,
27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,
27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,28,
};

const BYTE g_DistLookup[512] =
{
 0, 1, 2, 3, 4, 4, 5, 5, 6, 6, 6, 6, 7, 7, 7, 7,
 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9,
10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,
12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,
13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,
13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,
14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,
14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,
14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,
14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,
15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,
 0, 0,16,17,18,18,19,19,20,20,20,20,21,21,21,21,
22,22,22,22,22,22,22,22,23,23,23,23,23,23,23,23,
24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,
25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,
26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,
26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,
27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,
27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,
28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,
28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,
28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,
28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,
29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,
29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,
29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,
29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,
};
#else /* !DECLARE_DATA */
extern const BYTE g_LengthLookup[];
extern const BYTE g_DistLookup[];
#endif /* DECLARE_DATA */

#ifdef DECLARE_DATA
const BYTE g_CodeOrder[] =
{16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15,};
#else /* !DECLARE_DATA */
extern const BYTE g_CodeOrder[19];
#endif /* !DECLARE_DATA */

#ifdef DECLARE_DATA
const BYTE g_ExtraLengthBits[] =
{0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0,};
#else /* !DECLARE_DATA */
extern const BYTE g_ExtraLengthBits[];
#endif /* !DECLARE_DATA */

#ifdef DECLARE_DATA
const BYTE g_ExtraDistanceBits[] =
{0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,0,0,};
#else /* !DECLARE_DATA */
extern const BYTE g_ExtraDistanceBits[];
#endif /* !DECLARE_DATA */

#ifdef DECLARE_DATA
const BYTE g_StaticLiteralTreeLength[] = {
0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,
0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,
0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,
0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,
0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,
0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,
0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,
0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,
0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,
0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,
0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,
0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,
0x09,0x09,0x09,0x09,0x09,0x09,0x09,0x09,0x09,0x09,0x09,0x09,
0x09,0x09,0x09,0x09,0x09,0x09,0x09,0x09,0x09,0x09,0x09,0x09,
0x09,0x09,0x09,0x09,0x09,0x09,0x09,0x09,0x09,0x09,0x09,0x09,
0x09,0x09,0x09,0x09,0x09,0x09,0x09,0x09,0x09,0x09,0x09,0x09,
0x09,0x09,0x09,0x09,0x09,0x09,0x09,0x09,0x09,0x09,0x09,0x09,
0x09,0x09,0x09,0x09,0x09,0x09,0x09,0x09,0x09,0x09,0x09,0x09,
0x09,0x09,0x09,0x09,0x09,0x09,0x09,0x09,0x09,0x09,0x09,0x09,
0x09,0x09,0x09,0x09,0x09,0x09,0x09,0x09,0x09,0x09,0x09,0x09,
0x09,0x09,0x09,0x09,0x09,0x09,0x09,0x09,0x09,0x09,0x09,0x09,
0x09,0x09,0x09,0x09,0x07,0x07,0x07,0x07,0x07,0x07,0x07,0x07,
0x07,0x07,0x07,0x07,0x07,0x07,0x07,0x07,0x07,0x07,0x07,0x07,
0x07,0x07,0x07,0x07,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,
};
#else /* !DECLARE_DATA */
extern const BYTE g_StaticLiteralTreeLength[];
#endif /* DECLARE_DATA */

#ifdef DECLARE_DATA
const USHORT g_StaticLiteralTreeCode[] = {
0x000c,0x008c,0x004c,0x00cc,0x002c,0x00ac,0x006c,0x00ec,
0x001c,0x009c,0x005c,0x00dc,0x003c,0x00bc,0x007c,0x00fc,
0x0002,0x0082,0x0042,0x00c2,0x0022,0x00a2,0x0062,0x00e2,
0x0012,0x0092,0x0052,0x00d2,0x0032,0x00b2,0x0072,0x00f2,
0x000a,0x008a,0x004a,0x00ca,0x002a,0x00aa,0x006a,0x00ea,
0x001a,0x009a,0x005a,0x00da,0x003a,0x00ba,0x007a,0x00fa,
0x0006,0x0086,0x0046,0x00c6,0x0026,0x00a6,0x0066,0x00e6,
0x0016,0x0096,0x0056,0x00d6,0x0036,0x00b6,0x0076,0x00f6,
0x000e,0x008e,0x004e,0x00ce,0x002e,0x00ae,0x006e,0x00ee,
0x001e,0x009e,0x005e,0x00de,0x003e,0x00be,0x007e,0x00fe,
0x0001,0x0081,0x0041,0x00c1,0x0021,0x00a1,0x0061,0x00e1,
0x0011,0x0091,0x0051,0x00d1,0x0031,0x00b1,0x0071,0x00f1,
0x0009,0x0089,0x0049,0x00c9,0x0029,0x00a9,0x0069,0x00e9,
0x0019,0x0099,0x0059,0x00d9,0x0039,0x00b9,0x0079,0x00f9,
0x0005,0x0085,0x0045,0x00c5,0x0025,0x00a5,0x0065,0x00e5,
0x0015,0x0095,0x0055,0x00d5,0x0035,0x00b5,0x0075,0x00f5,
0x000d,0x008d,0x004d,0x00cd,0x002d,0x00ad,0x006d,0x00ed,
0x001d,0x009d,0x005d,0x00dd,0x003d,0x00bd,0x007d,0x00fd,
0x0013,0x0113,0x0093,0x0193,0x0053,0x0153,0x00d3,0x01d3,
0x0033,0x0133,0x00b3,0x01b3,0x0073,0x0173,0x00f3,0x01f3,
0x000b,0x010b,0x008b,0x018b,0x004b,0x014b,0x00cb,0x01cb,
0x002b,0x012b,0x00ab,0x01ab,0x006b,0x016b,0x00eb,0x01eb,
0x001b,0x011b,0x009b,0x019b,0x005b,0x015b,0x00db,0x01db,
0x003b,0x013b,0x00bb,0x01bb,0x007b,0x017b,0x00fb,0x01fb,
0x0007,0x0107,0x0087,0x0187,0x0047,0x0147,0x00c7,0x01c7,
0x0027,0x0127,0x00a7,0x01a7,0x0067,0x0167,0x00e7,0x01e7,
0x0017,0x0117,0x0097,0x0197,0x0057,0x0157,0x00d7,0x01d7,
0x0037,0x0137,0x00b7,0x01b7,0x0077,0x0177,0x00f7,0x01f7,
0x000f,0x010f,0x008f,0x018f,0x004f,0x014f,0x00cf,0x01cf,
0x002f,0x012f,0x00af,0x01af,0x006f,0x016f,0x00ef,0x01ef,
0x001f,0x011f,0x009f,0x019f,0x005f,0x015f,0x00df,0x01df,
0x003f,0x013f,0x00bf,0x01bf,0x007f,0x017f,0x00ff,0x01ff,
0x0000,0x0040,0x0020,0x0060,0x0010,0x0050,0x0030,0x0070,
0x0008,0x0048,0x0028,0x0068,0x0018,0x0058,0x0038,0x0078,
0x0004,0x0044,0x0024,0x0064,0x0014,0x0054,0x0034,0x0074,
0x0003,0x0083,0x0043,0x00c3,0x0023,0x00a3,0x0063,0x00e3,
};
#else /* !DECLARE_DATA */
extern const USHORT g_StaticLiteralTreeCode[];
#endif /* DECLARE_DATA */

#ifdef DECLARE_DATA
const USHORT g_StaticDistanceTree[] = {
0x0000,0x0010,0x0008,0x0018,0x0004,0x0014,0x000c,0x001c,
0x0002,0x0012,0x000a,0x001a,0x0006,0x0016,0x000e,0x001e,
0x0001,0x0011,0x0009,0x0019,0x0005,0x0015,0x000d,0x001d,
0x0003,0x0013,0x000b,0x001b,0x0007,0x0017,0x000f,0x001f,
};
#else /* !DECLARE_DATA */
extern const USHORT g_StaticDistanceTree[];
#endif /* DECLARE_DATA */

#ifdef DECLARE_DATA
const SHORT g_StaticLiteralTreeTable[] = {
0x0100,0x0050,0x0010,0x0118,0x0110,0x0070,0x0030,0x00c0,
0x0108,0x0060,0x0020,0x00a0,0x0000,0x0080,0x0040,0x00e0,
0x0104,0x0058,0x0018,0x0090,0x0114,0x0078,0x0038,0x00d0,
0x010c,0x0068,0x0028,0x00b0,0x0008,0x0088,0x0048,0x00f0,
0x0102,0x0054,0x0014,0x011c,0x0112,0x0074,0x0034,0x00c8,
0x010a,0x0064,0x0024,0x00a8,0x0004,0x0084,0x0044,0x00e8,
0x0106,0x005c,0x001c,0x0098,0x0116,0x007c,0x003c,0x00d8,
0x010e,0x006c,0x002c,0x00b8,0x000c,0x008c,0x004c,0x00f8,
0x0101,0x0052,0x0012,0x011a,0x0111,0x0072,0x0032,0x00c4,
0x0109,0x0062,0x0022,0x00a4,0x0002,0x0082,0x0042,0x00e4,
0x0105,0x005a,0x001a,0x0094,0x0115,0x007a,0x003a,0x00d4,
0x010d,0x006a,0x002a,0x00b4,0x000a,0x008a,0x004a,0x00f4,
0x0103,0x0056,0x0016,0x011e,0x0113,0x0076,0x0036,0x00cc,
0x010b,0x0066,0x0026,0x00ac,0x0006,0x0086,0x0046,0x00ec,
0x0107,0x005e,0x001e,0x009c,0x0117,0x007e,0x003e,0x00dc,
0x010f,0x006e,0x002e,0x00bc,0x000e,0x008e,0x004e,0x00fc,
0x0100,0x0051,0x0011,0x0119,0x0110,0x0071,0x0031,0x00c2,
0x0108,0x0061,0x0021,0x00a2,0x0001,0x0081,0x0041,0x00e2,
0x0104,0x0059,0x0019,0x0092,0x0114,0x0079,0x0039,0x00d2,
0x010c,0x0069,0x0029,0x00b2,0x0009,0x0089,0x0049,0x00f2,
0x0102,0x0055,0x0015,0x011d,0x0112,0x0075,0x0035,0x00ca,
0x010a,0x0065,0x0025,0x00aa,0x0005,0x0085,0x0045,0x00ea,
0x0106,0x005d,0x001d,0x009a,0x0116,0x007d,0x003d,0x00da,
0x010e,0x006d,0x002d,0x00ba,0x000d,0x008d,0x004d,0x00fa,
0x0101,0x0053,0x0013,0x011b,0x0111,0x0073,0x0033,0x00c6,
0x0109,0x0063,0x0023,0x00a6,0x0003,0x0083,0x0043,0x00e6,
0x0105,0x005b,0x001b,0x0096,0x0115,0x007b,0x003b,0x00d6,
0x010d,0x006b,0x002b,0x00b6,0x000b,0x008b,0x004b,0x00f6,
0x0103,0x0057,0x0017,0x011f,0x0113,0x0077,0x0037,0x00ce,
0x010b,0x0067,0x0027,0x00ae,0x0007,0x0087,0x0047,0x00ee,
0x0107,0x005f,0x001f,0x009e,0x0117,0x007f,0x003f,0x00de,
0x010f,0x006f,0x002f,0x00be,0x000f,0x008f,0x004f,0x00fe,
0x0100,0x0050,0x0010,0x0118,0x0110,0x0070,0x0030,0x00c1,
0x0108,0x0060,0x0020,0x00a1,0x0000,0x0080,0x0040,0x00e1,
0x0104,0x0058,0x0018,0x0091,0x0114,0x0078,0x0038,0x00d1,
0x010c,0x0068,0x0028,0x00b1,0x0008,0x0088,0x0048,0x00f1,
0x0102,0x0054,0x0014,0x011c,0x0112,0x0074,0x0034,0x00c9,
0x010a,0x0064,0x0024,0x00a9,0x0004,0x0084,0x0044,0x00e9,
0x0106,0x005c,0x001c,0x0099,0x0116,0x007c,0x003c,0x00d9,
0x010e,0x006c,0x002c,0x00b9,0x000c,0x008c,0x004c,0x00f9,
0x0101,0x0052,0x0012,0x011a,0x0111,0x0072,0x0032,0x00c5,
0x0109,0x0062,0x0022,0x00a5,0x0002,0x0082,0x0042,0x00e5,
0x0105,0x005a,0x001a,0x0095,0x0115,0x007a,0x003a,0x00d5,
0x010d,0x006a,0x002a,0x00b5,0x000a,0x008a,0x004a,0x00f5,
0x0103,0x0056,0x0016,0x011e,0x0113,0x0076,0x0036,0x00cd,
0x010b,0x0066,0x0026,0x00ad,0x0006,0x0086,0x0046,0x00ed,
0x0107,0x005e,0x001e,0x009d,0x0117,0x007e,0x003e,0x00dd,
0x010f,0x006e,0x002e,0x00bd,0x000e,0x008e,0x004e,0x00fd,
0x0100,0x0051,0x0011,0x0119,0x0110,0x0071,0x0031,0x00c3,
0x0108,0x0061,0x0021,0x00a3,0x0001,0x0081,0x0041,0x00e3,
0x0104,0x0059,0x0019,0x0093,0x0114,0x0079,0x0039,0x00d3,
0x010c,0x0069,0x0029,0x00b3,0x0009,0x0089,0x0049,0x00f3,
0x0102,0x0055,0x0015,0x011d,0x0112,0x0075,0x0035,0x00cb,
0x010a,0x0065,0x0025,0x00ab,0x0005,0x0085,0x0045,0x00eb,
0x0106,0x005d,0x001d,0x009b,0x0116,0x007d,0x003d,0x00db,
0x010e,0x006d,0x002d,0x00bb,0x000d,0x008d,0x004d,0x00fb,
0x0101,0x0053,0x0013,0x011b,0x0111,0x0073,0x0033,0x00c7,
0x0109,0x0063,0x0023,0x00a7,0x0003,0x0083,0x0043,0x00e7,
0x0105,0x005b,0x001b,0x0097,0x0115,0x007b,0x003b,0x00d7,
0x010d,0x006b,0x002b,0x00b7,0x000b,0x008b,0x004b,0x00f7,
0x0103,0x0057,0x0017,0x011f,0x0113,0x0077,0x0037,0x00cf,
0x010b,0x0067,0x0027,0x00af,0x0007,0x0087,0x0047,0x00ef,
0x0107,0x005f,0x001f,0x009f,0x0117,0x007f,0x003f,0x00df,
0x010f,0x006f,0x002f,0x00bf,0x000f,0x008f,0x004f,0x00ff,
};
#else /* !DECLARE_DATA */
extern const USHORT g_StaticLiteralTreeTable[];
#endif /* DECLARE_DATA */

#ifdef DECLARE_DATA
const BYTE g_StaticDistanceTreeTable[] = {
0x00,0x10,0x08,0x18,0x04,0x14,0x0c,0x1c,0x02,0x12,0x0a,0x1a,
0x06,0x16,0x0e,0x1e,0x01,0x11,0x09,0x19,0x05,0x15,0x0d,0x1d,
0x03,0x13,0x0b,0x1b,0x07,0x17,0x0f,0x1f,
};
#else /* !DECLARE_DATA */
extern const BYTE g_StaticDistanceTreeTable[];
#endif /* DECLARE_DATA */

#ifdef DECLARE_DATA
const ULONG g_LengthBase[] =
{
3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,
35,43,51,59,67,83,99,115,131,163,195,227,258,};
#else /* !DECLARE_DATA */
extern const ULONG g_LengthBase[];
#endif /* !DECLARE_DATA */

#ifdef DECLARE_DATA
const ULONG g_DistanceBasePosition[] =
{
1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,
257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577,0,0,};
#else /* !DECLARE_DATA */
extern const ULONG g_DistanceBasePosition[];
#endif /* !DECLARE_DATA */

#ifdef DECLARE_DATA
const ULONG g_BitMask[] =
{
0,1,3,7,15,31,63,127,255,511,1023,2047,4095,8191,16383,32767,};
#else /* !DECLARE_DATA */
extern const ULONG g_BitMask[];
#endif /* !DECLARE_DATA */

#ifdef DECLARE_DATA
const BYTE g_FastEncoderTreeStructureData[] = {
0xed,0xbd,0x07,0x60,0x1c,0x49,0x96,0x25,0x26,0x2f,0x6d,0xca,
0x7b,0x7f,0x4a,0xf5,0x4a,0xd7,0xe0,0x74,0xa1,0x08,0x80,0x60,
0x13,0x24,0xd8,0x90,0x40,0x10,0xec,0xc1,0x88,0xcd,0xe6,0x92,
0xec,0x1d,0x69,0x47,0x23,0x29,0xab,0x2a,0x81,0xca,0x65,0x56,
0x65,0x5d,0x66,0x16,0x40,0xcc,0xed,0x9d,0xbc,0xf7,0xde,0x7b,
0xef,0xbd,0xf7,0xde,0x7b,0xef,0xbd,0xf7,0xba,0x3b,0x9d,0x4e,
0x27,0xf7,0xdf,0xff,0x3f,0x5c,0x66,0x64,0x01,0x6c,0xf6,0xce,
0x4a,0xda,0xc9,0x9e,0x21,0x80,0xaa,0xc8,0x1f,0x3f,0x7e,0x7c,
0x1f,0x3f,
};
#else /* !DECLARE_DATA */
extern const BYTE g_FastEncoderTreeStructureData[];
#endif /* DECLARE_DATA */

#define FAST_ENCODER_TREE_LENGTH 98
#define FAST_ENCODER_POST_TREE_BITBUF 0x0022
#define FAST_ENCODER_POST_TREE_BITCOUNT 9
